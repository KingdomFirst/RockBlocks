{"version":3,"file":"cyberSourceGatewayControl.obs.js","sources":["../../src/Controls/cyberSourceGatewayControl.obs"],"sourcesContent":["<!-- Copyright by Kingdom First Solutions; Licensed under the Apache License -->\r\n<template>\r\n    <div>\r\n        <div v-if=\"loading\" class=\"text-center\">\r\n            <LoadingIndicator />\r\n        </div>\r\n\r\n        <div v-show=\"!loading && !failedToLoad\" style=\"max-width: 600px;\">\r\n            <div :id=\"controlId\" class=\"js-cybersource-payment-inputs cybersource-payment-inputs\" ref=\"paymentInputs\">\r\n                <div class=\"gateway-address-container js-gateway-address-container\" ref=\"addressContainer\" v-show=\"showAddress\">\r\n                    <h4>Billing</h4>\r\n                    <AddressControl label=\"Address\" v-model=\"address\" :disabled=\"isSaving\" :rules=\"addressRules\" />\r\n                </div>\r\n                <div class=\"gateway-creditcard-container gateway-payment-container js-gateway-creditcard-container\" >\r\n                    <h4>Payment</h4>\r\n                    <div class=\"form-group position-relative\">\r\n                        <label class=\"control-label\">Card Number</label>\r\n                        <div class=\"form-control js-credit-card-input iframe-input credit-card-input\"></div>\r\n                        <i id=\"cardDisplay\" style=\"position: absolute; right: 10px; bottom: 3px;\"></i>\r\n                    </div>\r\n                    <div class=\"break\"></div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-xs-6 exp-col\">\r\n                            <div class=\"iframe-input credit-card-exp-input js-credit-card-exp-input\"></div>\r\n                            <DatePartsPicker label=\"Expiration Date\" :isRequired=\"true\" :startYear=\"nowYear\" :futureYearCount=\"15\" v-model=\"ccexpvalue\" :showBlankItem=\"false\" :multiple=\"false\" :hideDay=\"true\" :disabled=\"isSaving\" />\r\n                        </div>\r\n                        <div class=\"col-xs-6 cvv-col\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"control-label credit-card-cvv-label\">{{ FlexJS?.config.fields.cvv.title }}</label>\r\n                                <div id=\"divCVV\" class=\"form-control js-credit-card-cvv-input iframe-input credit-card-cvv-input input-width-sm\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" style=\"display: none;\" class=\"payment-button js-payment-button\"></button>\r\n            </div>\r\n        </div>\r\n\r\n        <div v-show=\"validationMessage\" class=\"alert alert-validation js-payment-input-validation\">\r\n            <span class='js-validation-message'>\r\n                {{ validationMessage }}\r\n                <p v-show=\"validationMessageShowReload\"><a href=\"javascript:location.reload();\" class=\"btn btn-warning mt-3\" onclick=\"Rock.controls.bootstrapButton.showLoading(this);\" data-loading-text=\"Reloading...\">Reload Page</a></p>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    // #region MicroForm Types\r\n\r\n    type InputField = {\r\n        selector: string;\r\n        title: string;\r\n        placeholder: string;\r\n    };\r\n\r\n    type HideableInputField = InputField & {\r\n        display?: \"show\" | \"hide\" | \"required\";\r\n    };\r\n\r\n    type InputFields = {\r\n        ccnumber?: InputField;\r\n        ccexp?: InputField;\r\n        cvv?: HideableInputField;\r\n\r\n        [index: string]: InputField | undefined;\r\n    };\r\n\r\n    type MonthYearDay = {\r\n        month: number;\r\n        year: number;\r\n        day: number;\r\n    }\r\n\r\n    /**\r\n     * Commented out by KFS for now, I would love to handle validation and timeout the same way as other Gateway's,\r\n     * but Cybersource is not as great at returning invalid states of their fields. Need to look into it, but going to comment out code for now.\r\n     */\r\n    //type TimeoutCallback = () => void;\r\n    //type ValidationCallback = (field: string, validated: boolean, message: string) => void;\r\n\r\n    type MicroformOptions = {\r\n        paymentSelector: string;\r\n\r\n        variant: \"inline\";\r\n\r\n        fields: InputFields;\r\n\r\n        styleSniffer: boolean;\r\n\r\n        customStyles: Record<string, Record<string, string>>;\r\n\r\n        cardIcons: Record<string, string>\r\n\r\n        timeoutDuration?: number;\r\n\r\n        initialLoadTimeout?: number;\r\n\r\n        //timeoutCallback?: TimeoutCallback;\r\n\r\n        //validationCallback?: ValidationCallback;\r\n\r\n        //callback: ResponseCallback;\r\n\r\n        flexTimeout?: number;\r\n\r\n        flexTimeLoaded?: number;\r\n    };\r\n\r\n    type MicroformCard = {\r\n        name: string;\r\n        securityCode: { name:string }\r\n    }\r\n\r\n    type MicroformResponse = {\r\n        card: Array<MicroformCard>;\r\n        message: string;\r\n    }\r\n    type MicroformField = {\r\n        _config: object;\r\n\r\n        _iframe: HTMLIFrameElement;\r\n\r\n        _loaded: boolean;\r\n\r\n        load: (selector: string) => void;\r\n\r\n        on: (selector: string, callback:(data:MicroformResponse) => void) => void;\r\n    };\r\n\r\n    type Microform = {\r\n        createField: (type:string, options?:object) => MicroformField;\r\n        createToken: (options:object, callback:(data:MicroformResponse, token:string) => void) => void;\r\n    }\r\n\r\n    type FlexJS = {\r\n        config: MicroformOptions;\r\n\r\n        captureContext: string;\r\n\r\n        microform: Microform;\r\n\r\n        inSubmission: boolean;\r\n\r\n        number:MicroformField;\r\n\r\n        securityCode:MicroformField;\r\n\r\n        loadCheckInterval: ReturnType<typeof setInterval>;\r\n    };\r\n\r\n    /* eslint-disable-next-line */\r\n    let FlexJS: FlexJS | undefined;\r\n\r\n    /* eslint-disable-next-line */\r\n    declare function Flex(jwk:string): void | undefined;\r\n\r\n    // #endregion\r\n\r\n</script>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, onMounted, PropType, ref } from \"vue\";\r\n    import LoadingIndicator from \"@Obsidian/Controls/loadingIndicator.obs\";\r\n    import DatePartsPicker from \"@Obsidian/Controls/datePartsPicker.obs\";\r\n    import AddressControl from \"@Obsidian/Controls/addressControl.obs\";\r\n    import { newGuid } from \"@Obsidian/Utility/guid\";\r\n    import { onSubmitPayment } from \"@Obsidian/Core/Controls/financialGateway\";\r\n    import { GatewayEmitStrings } from \"@Obsidian/Enums/Controls/gatewayEmitStrings\";\r\n    import { FormError } from \"@Obsidian/Utility/form\";\r\n    import { AddressControlBag } from \"@Obsidian/ViewModels/Controls/addressControlBag\";\r\n\r\n\r\n    /**\r\n     * The settings we expect to receive from the web server.\r\n     */\r\n    type Settings = {\r\n        gatewayUrl: string;\r\n        addressMode: string;\r\n        microFormJsPath: string;\r\n        microFormJWK: string;\r\n        jwkGeneratedTime: number;\r\n        address?: AddressControlBag | null;\r\n    };\r\n\r\n    /**\r\n     * Commented out by KFS for now, I would love to handle validation the same way as other Gateway's,\r\n     * but Cybersource is not as great at returning invalid states of their fields. Need to look into it, but going to comment out code for now.\r\n     * \r\n     * The field validation state for the various input fields.\r\n     */\r\n    //type ValidationField = {\r\n    //    /** The name of the field. */\r\n    //    field: string;\r\n\r\n    //    /** true if the field is valid; otherwise false. */\r\n    //    status: boolean;\r\n\r\n    //    /** If status if false this will contain the error message; otherwise an empty string. */\r\n    //    message: string;\r\n    //};\r\n\r\n    const standardStyling = ``;\r\n    const isSaving = ref<boolean>(false);\r\n\r\n    const props = defineProps({\r\n        settings: {\r\n            type: Object as PropType<Settings>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: typeof GatewayEmitStrings.Success, value: string): void;\r\n        (e: typeof GatewayEmitStrings.Validation, value: FormError[]): void;\r\n        (e: typeof GatewayEmitStrings.Error, value: string): void;\r\n    }>();\r\n\r\n    let hasAttemptedSubmit = false;\r\n\r\n    /** true if we have received a token back from Cybersource. */\r\n    let hasReceivedToken = false;\r\n\r\n    const creditCardButtonClasses = [\"btn\", \"btn-default\", \"active\", \"payment-creditcard\"];\r\n\r\n    const nowYear = computed((): number => { return new Date().getFullYear(); });\r\n\r\n    /** true while we are still loading data; otherwise false. */\r\n    const loading = ref(true);\r\n\r\n    /** true if we failed to load the Microform content. */\r\n    const failedToLoad = ref(false);\r\n\r\n    /** Contains the current validation message to be displayed. */\r\n    const validationMessage = ref(\"\");\r\n    const validationMessageShowReload = ref(false);\r\n\r\n    /** true if we have already sent a token response to the server; otherwise false. */\r\n    const tokenResponseSent = ref(false);\r\n\r\n    let ccexpvalue: MonthYearDay = { month: 0, year: 0, day: 0 };\r\n\r\n    /** In order for the AddressControl to allow our code to be compiled I had to add\r\n     *  // @ts-ignore above each line in the addressControl.obs file that generated an exception.\r\n     */\r\n    const address = ref<AddressControlBag | undefined>(props.settings.address ?? undefined);\r\n    const showAddress = ref(true);\r\n    const addressRules = ref(\"\");\r\n\r\n    /**\r\n     * Contains a unique identifier that we can use to allow MicroformJS\r\n     * to find our input fields.\r\n     */\r\n    const controlId = `cyberSource_${newGuid()}`;\r\n\r\n    const paymentInputs = ref<HTMLElement | null>(null);\r\n\r\n        /**\r\n     * Ensures the Cybersource Flex Microform script is loaded into the browser.\r\n     *\r\n     * @param microFormJWK The microform jwk key that will be used to initialize the script.\r\n     */\r\n    async function loadMicroformJsAsync(microFormJWK: string): Promise<boolean> {\r\n        if (typeof Flex === \"undefined\") {\r\n            const script = document.createElement(\"script\");\r\n            script.type = \"text/javascript\";\r\n            script.src = props.settings.microFormJsPath;\r\n            script.setAttribute(\"data-variant\", \"inline\");\r\n            document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n\r\n            try {\r\n                await new Promise<void>((resolve, reject) => {\r\n                    script.addEventListener(\"load\", () => resolve());\r\n                    script.addEventListener(\"error\", () => reject());\r\n                });\r\n            }\r\n            catch {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return typeof Flex !== \"undefined\";\r\n    }\r\n\r\n    /**\r\n     * Loads styles into the head.\r\n     */\r\n    async function loadStandardStyleTagAsync(): Promise<void> {\r\n        const style = document.createElement(\"style\");\r\n        style.type = \"text/css\";\r\n        style.innerText = standardStyling;\r\n\r\n        await new Promise<void>((resolve, reject) => {\r\n            style.addEventListener(\"load\", () => resolve());\r\n            style.addEventListener(\"error\", () => reject());\r\n\r\n            document.getElementsByTagName(\"head\")[0].appendChild(style);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the standard Microform options. This is primarily all the custom CSS\r\n     * and control references.\r\n     *\r\n     * @param controlId The identifier of the parent control that contains all the input fields.\r\n     *\r\n     * @returns An object that contains the FlexJS options.\r\n     */\r\n     function getFlexJSOptions(controlId: string): MicroformOptions {\r\n        // Populate our custom CSS to make the fields mostly match standard Rock\r\n        // input fields.\r\n        const customStyles: Record<string, Record<string, string>> = {\r\n            ':disabled': { 'cursor': 'not-allowed' },\r\n            'valid': { 'color': '#3c763d' },\r\n            'invalid': { 'color': '#a94442' }\r\n        };\r\n\r\n        const cardIcons: Record<string, string> = {\r\n            \"visa\": 'fab fa-cc-visa', \r\n            \"mastercard\": 'fab fa-cc-mastercard', \r\n            \"amex\": 'fab fa-cc-amex',\r\n            \"discover\": 'fab fa-cc-discover',\r\n            \"dinersclub\": 'fab fa-cc-diners-club',\r\n            \"jcb\": 'fab fa-cc-jcb'\r\n        };\r\n\r\n        // Build the Microform options.\r\n        const options: MicroformOptions = {\r\n            paymentSelector: `${controlId} .js-payment-button`,\r\n            variant: \"inline\",\r\n            fields: {\r\n                ccnumber: {\r\n                    selector: `#${controlId} .js-credit-card-input`,\r\n                    title: \"Card Number\",\r\n                    placeholder: \"0000 0000 0000 0000\"\r\n                },\r\n                ccexp: {\r\n                    selector: `#${controlId} .js-credit-card-exp-input`,\r\n                    title: \"Expiration Date\",\r\n                    placeholder: \"MM / YY\"\r\n                },\r\n                cvv: {\r\n                    display: \"show\",\r\n                    selector: `#${controlId} .js-credit-card-cvv-input`,\r\n                    title: \"Security Code\",\r\n                    placeholder: \"CVV\"\r\n                } as InputField\r\n            },\r\n            styleSniffer: false,\r\n            customStyles,\r\n            cardIcons,\r\n            timeoutDuration: 10000,\r\n            initialLoadTimeout: 30000,\r\n            flexTimeout: 900000,\r\n            flexTimeLoaded: props.settings.jwkGeneratedTime\r\n        };\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Commented out by KFS for now, I would love to handle validation the same way as other Gateway's,\r\n     * but Cybersource is not as great at returning invalid states of their fields. Need to look into it, but going to comment out code for now.\r\n     * \r\n     * Translates the Cybersource field name into a user friendly one.\r\n     *\r\n     * @param field The field name as provided by Cybersource.\r\n     *\r\n     * @returns A user friendly name for the field.\r\n     */\r\n    // function getFieldFriendlyName(field: string): string {\r\n    //    if (field === \"ccnumber\") {\r\n    //        return \"Card Number\";\r\n    //    }\r\n    //    else if (field === \"ccexp\") {\r\n    //        return \"Expiration Date\";\r\n    //    }\r\n    //    else if (field === \"cvv\") {\r\n    //        return \"Security Code\";\r\n    //    }\r\n    //    else {\r\n    //        return \"Payment Information\";\r\n    //    }\r\n    //}\r\n    \r\n     function checkCybersourceFieldsLoaded(clearTimer:boolean = true): void {\r\n         var currentTime = new Date().getTime();\r\n         var timeDiff = currentTime - FlexJS?.config?.flexTimeLoaded ?? 0;\r\n         if (FlexJS?.config?.flexTimeout && timeDiff >= FlexJS?.config?.flexTimeout) {\r\n             if (clearTimer) {\r\n                 clearInterval(FlexJS?.loadCheckInterval);\r\n             }\r\n\r\n            validationMessage.value = 'We\\'re sorry your payment session has timed out. Please reload the page to try again.';\r\n            validationMessageShowReload.value = true;\r\n\r\n            var actionBtn = document.querySelector('.btn-give-now, .js-submit-hostedpaymentinfo, .navigation.actions .btn, .registration-entry .actions .btn-primary');\r\n            if (actionBtn != null) {\r\n                actionBtn.classList.add('disabled');\r\n                actionBtn.removeAttribute('href');\r\n                actionBtn.setAttribute('disabled', 'disabled');\r\n            }\r\n         }\r\n     }\r\n\r\n     function initCybersourceMicroFormFields():void {\r\n         if (FlexJS?.number == undefined && FlexJS?.securityCode == undefined) {\r\n             FlexJS.number = FlexJS?.microform?.createField('number', { placeholder: '0000 0000 0000 0000' });\r\n             FlexJS.securityCode = FlexJS?.microform?.createField('securityCode');\r\n         }\r\n\r\n         FlexJS?.number?.load('.cybersource-payment-inputs .js-credit-card-input');\r\n         FlexJS?.securityCode?.load('.cybersource-payment-inputs .js-credit-card-cvv-input');\r\n\r\n         FlexJS?.number?.on('error', function(data) {\r\n             console.error(data);\r\n             loading.value = false;\r\n             validationMessage.value = data.message;\r\n         });\r\n\r\n         FlexJS?.number?.on('load', function(data) { \r\n            loading.value = false; \r\n        });\r\n\r\n         var cardIcon = document.querySelector('#cardDisplay');\r\n         var cardSecurityCodeLabel = document.querySelector('label.credit-card-cvv-label');\r\n\r\n         FlexJS?.number?.on('change', function(data) {\r\n           if (data.card.length === 1) {\r\n             cardIcon.className = 'fa-2x ' + FlexJS?.config?.cardIcons[data.card[0].name];\r\n             cardSecurityCodeLabel.textContent = data.card[0].securityCode.name;\r\n             FlexJS.config.fields.cvv.title = data.card[0].securityCode.name;\r\n           } else {\r\n             cardIcon.className = 'fa-2x fas fa-credit-card';\r\n           }\r\n         });\r\n\r\n         checkCybersourceFieldsLoaded(false);\r\n\r\n         setTimeout(function () {\r\n             if (loading.value) {\r\n                 loading.value = false;\r\n                 failedToLoad.value = true;\r\n                 FlexJS.config.flexTimeLoaded -= FlexJS.config.flexTimeout;\r\n                 checkCybersourceFieldsLoaded(false);\r\n             }\r\n         }, FlexJS?.config?.initialLoadTimeout);\r\n     };\r\n\r\n     function submitCybersourceMicroFormInfo():void {\r\n         isSaving.value = true;\r\n\r\n         var options = {\r\n             expirationMonth: ('00'+ccexpvalue.month).slice(-2),\r\n             expirationYear: ccexpvalue.year\r\n         };\r\n\r\n         FlexJS.inSubmission = true;\r\n\r\n         FlexJS?.microform?.createToken(options, function (err, token) {\r\n             if (err) {\r\n                 // handle error\r\n                 console.error(err);\r\n                 isSaving.value = false;\r\n                 emit(GatewayEmitStrings.Error, err.message);\r\n             } else {\r\n                 hasReceivedToken = true;\r\n                 let addressToken = {\r\n                     billingAddress: address.value,\r\n                     originalToken: token\r\n                 }\r\n                 emit(GatewayEmitStrings.Success, JSON.stringify(addressToken) ?? \"\");\r\n             }\r\n         });\r\n     };\r\n\r\n    /**\r\n     * Commented out by KFS for now, I would love to handle validation the same way as other Gateway's,\r\n     * but Cybersource is not as great at returning invalid states of their fields. Need to look into it, but going to comment out code for now.\r\n     * \r\n     * Contains all the field validation states. */\r\n    //const validationFieldStatus: Record<string, ValidationField> = {\r\n    //    ccnumber: { field: getFieldFriendlyName(\"ccnumber\"), status: false, message: \"is required\" },\r\n    //    ccexp: { field: getFieldFriendlyName(\"ccexp\"), status: false, message: \"is required\" },\r\n    //    cvv: { field: getFieldFriendlyName(\"cvv\"), status: false, message: \"is required\" }\r\n    //};\r\n\r\n    /**\r\n     * Commented out by KFS for now, I would love to handle validation the same way as other Gateway's,\r\n     * but Cybersource is not as great at returning invalid states of their fields. Need to look into it, but going to comment out code for now.\r\n     * \r\n     * Validates all the inputs from MicroformJS to see if any visible input\r\n     * fields are invalid.\r\n     *\r\n     * @returns An object that describes if all the inputs are valid.\r\n     */\r\n    //function validateInputs(): FormError[] {\r\n    //    const errors: FormError[] = [];\r\n\r\n    //    for (const validationFieldKey in validationFieldStatus) {\r\n    //        const validationField = validationFieldStatus[validationFieldKey];\r\n\r\n    //        const inputField = document.querySelector(FlexJS.config.fields[validationFieldKey].selector ?? \"\") as HTMLElement;\r\n    //        const fieldVisible = (inputField?.offsetWidth ?? 0) !== 0 || (inputField?.offsetHeight ?? 0) !== 0;\r\n\r\n    //        if (fieldVisible && !validationField.status) {\r\n    //            const validationFieldTitle = getFieldFriendlyName(validationFieldKey);\r\n\r\n    //            errors.push({\r\n    //                name: validationFieldTitle,\r\n    //                text: validationField.message || \"unknown validation error\"\r\n    //            });\r\n    //        }\r\n    //    }\r\n\r\n    //    return errors;\r\n    //}\r\n\r\n    /**\r\n     * Commented out by KFS for now, I would love to handle timeout the same way as other Gateway's,\r\n     * but Cybersource is not as great at returning invalid states of their fields. Need to look into it, but going to comment out code for now.\r\n     * \r\n     * Callback function that handles the timeout scenario of Cybersource.\r\n     */\r\n    //const timeoutCallback: TimeoutCallback = () => {\r\n    //    // If we got a timeout after sending the response then ignore the error.\r\n    //    if (tokenResponseSent.value) {\r\n    //        return;\r\n    //    }\r\n\r\n    //    // A timeout callback will fire due to a timeout or incomplete\r\n    //    // input fields (Cybersource doesn't tell us why).\r\n    //    console.log(\"The tokenization didn't respond in the expected timeframe. This could be due to an invalid or incomplete field or poor connectivity - \" + Date());\r\n\r\n    //    // Since we don't know exactly what happened, lets see if it might\r\n    //    // be invalid inputs by checking them all manually.\r\n    //    const validationErrors = validateInputs();\r\n\r\n    //    if (validationErrors.length > 0) {\r\n    //        emit(GatewayEmitStrings.Validation, validationErrors);\r\n    //    }\r\n    //    else {\r\n    //        // Inputs seem to be valid, so show a message to let them\r\n    //        // know what seems to be happening.\r\n    //        console.log(\"Timeout happened for unknown reason, probably poor connectivity since we already validated inputs.\");\r\n\r\n    //        emit(GatewayEmitStrings.Validation, [\r\n    //            {\r\n    //                name: \"Payment Timeout\",\r\n    //                text: \"Response from gateway timed out. This could be do to poor connectivity or invalid payment values.\"\r\n    //            }\r\n    //        ]);\r\n    //    }\r\n    //};\r\n\r\n    /**\r\n     * Commented out by KFS for now, I would love to handle validation the same way as other Gateway's,\r\n     * but Cybersource is not as great at returning invalid states of their fields. Need to look into it, but going to comment out code for now.\r\n     * \r\n     * Callback function that handles field validation results from the\r\n     * Microform back-end.\r\n     *\r\n     * @param field The name of the field being validated.\r\n     * @param validated true if the field is valid; otherwise false.\r\n     * @param message A message that describes the reason for the validation failure.\r\n     */\r\n    //const validationCallback: ValidationCallback = (field: string, validated: boolean, message: string): void => {\r\n    //    // if there is a validation error, keep the message and field that\r\n    //    // has the error. Then we'll check it before starting the payment\r\n    //    // submission.\r\n\r\n    //    if (message === \"Field is empty\") {\r\n    //        message = \"is required\";\r\n    //    }\r\n\r\n    //    validationFieldStatus[field] = {\r\n    //        field: field,\r\n    //        status: validated,\r\n    //        message: message\r\n    //    };\r\n\r\n    //    const validationErrors = validateInputs();\r\n\r\n    //    if (hasAttemptedSubmit && !(FlexJS?.inSubmission ?? false) && !hasReceivedToken) {\r\n    //        isSaving.value = false;\r\n    //        emit(GatewayEmitStrings.Validation, validationErrors);\r\n    //    }\r\n    //};\r\n\r\n    // Add a callback when the submit payment button is pressed.\r\n    onSubmitPayment(() => {\r\n        if (loading.value || failedToLoad.value) {\r\n            return;\r\n        }\r\n\r\n        tokenResponseSent.value = false;\r\n\r\n        // The delay allows field validation when losing field focus.\r\n        setTimeout(() => {\r\n            //const validationErrors = validateInputs();\r\n\r\n            hasAttemptedSubmit = true;\r\n            //if (validationErrors.length === 0) {\r\n                submitCybersourceMicroFormInfo();\r\n            //}\r\n            //else {\r\n            //    emit(GatewayEmitStrings.Validation, validationErrors);\r\n            //}\r\n        }, 0);\r\n    });\r\n\r\n    // Additional processing once our template has been processed and mounted\r\n    // into the DOM. Initialize the Cybersource Microform fields.\r\n    onMounted(async () => {\r\n        await loadStandardStyleTagAsync();\r\n\r\n        if (!(await loadMicroformJsAsync(props.settings.microFormJWK ?? \"\"))) {\r\n            emit(GatewayEmitStrings.Error, \"Error configuring hosted gateway. This could be due to an invalid or missing API Key. Please verify that API Key is configured correctly in gateway settings.\");\r\n            return;\r\n        }\r\n\r\n        if (paymentInputs.value) {\r\n            paymentInputs.value.querySelectorAll(\".iframe-input\").forEach(el => {\r\n                el.innerHTML = \"\";\r\n            });\r\n        }\r\n\r\n        try {\r\n            const options = getFlexJSOptions(controlId);\r\n\r\n            var flex = new Flex(props.settings.microFormJWK);\r\n\r\n            FlexJS = {\r\n                config: options,\r\n                captureContext: props.settings.microFormJWK,\r\n                inSubmission: false,\r\n                microform: flex.microform({ styles: options.customStyles }),\r\n                loadCheckInterval: setInterval(checkCybersourceFieldsLoaded,1000),\r\n                number: undefined,\r\n                securityCode: undefined\r\n            };\r\n\r\n            showAddress.value = props.settings.addressMode != \"Hide\";\r\n\r\n            if (props.settings.addressMode == \"Required\") {\r\n                addressRules.value = \"required\";\r\n            }\r\n\r\n            initCybersourceMicroFormFields();\r\n        }\r\n        catch {\r\n            failedToLoad.value = true;\r\n            emit(GatewayEmitStrings.Error, \"Error configuring hosted gateway. This could be due to an invalid or missing API Key. Please verify that API Key is configured correctly in gateway settings.\");\r\n            return;\r\n        }\r\n    });\r\n</script>"],"names":["FlexJS","standardStyling","isSaving","ref","nowYear","computed","Date","getFullYear","loading","failedToLoad","validationMessage","validationMessageShowReload","tokenResponseSent","ccexpvalue","month","year","day","address","_props$settings$addre","props","settings","undefined","showAddress","addressRules","controlId","concat","newGuid","paymentInputs","loadMicroformJsAsync","_x","_loadMicroformJsAsync","apply","arguments","_asyncToGenerator","microFormJWK","Flex","script","document","createElement","type","src","microFormJsPath","setAttribute","getElementsByTagName","appendChild","Promise","resolve","reject","addEventListener","_unused2","loadStandardStyleTagAsync","_loadStandardStyleTagAsync","style","innerText","getFlexJSOptions","customStyles","cardIcons","options","paymentSelector","variant","fields","ccnumber","selector","title","placeholder","ccexp","cvv","display","styleSniffer","timeoutDuration","initialLoadTimeout","flexTimeout","flexTimeLoaded","jwkGeneratedTime","checkCybersourceFieldsLoaded","_ref2","_FlexJS","_FlexJS$config","_FlexJS2","_FlexJS2$config","_FlexJS3","_FlexJS3$config","clearTimer","length","currentTime","getTime","timeDiff","config","_FlexJS4","clearInterval","loadCheckInterval","value","actionBtn","querySelector","classList","add","removeAttribute","initCybersourceMicroFormFields","_FlexJS5","_FlexJS6","_FlexJS9","_FlexJS9$number","_FlexJS10","_FlexJS10$securityCod","_FlexJS11","_FlexJS11$number","_FlexJS12","_FlexJS12$number","_FlexJS13","_FlexJS13$number","_FlexJS15","_FlexJS15$config","number","securityCode","_FlexJS7","_FlexJS7$microform","_FlexJS8","_FlexJS8$microform","microform","createField","load","on","data","console","error","message","cardIcon","cardSecurityCodeLabel","card","_FlexJS14","_FlexJS14$config","className","name","textContent","setTimeout","submitCybersourceMicroFormInfo","_FlexJS16","_FlexJS16$microform","expirationMonth","slice","expirationYear","inSubmission","createToken","err","token","emit","GatewayEmitStrings","Error","_JSON$stringify","addressToken","billingAddress","originalToken","Success","JSON","stringify","onSubmitPayment","onMounted","_props$settings$micro","querySelectorAll","forEach","el","innerHTML","flex","captureContext","styles","setInterval","addressMode","_unused"],"mappings":"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"}