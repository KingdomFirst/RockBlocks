{"version":3,"file":"cyberSourceGatewayControl.obs.js","sources":["../../src/Controls/cyberSourceGatewayControl.obs"],"sourcesContent":["<!-- Copyright by Kingdom First Solutions; Licensed under the Apache License -->\r\n<template>\r\n    <div>\r\n        <div v-if=\"loading\" class=\"text-center\">\r\n            <LoadingIndicator />\r\n        </div>\r\n\r\n        <div v-show=\"!loading && !failedToLoad\" style=\"max-width: 600px;\">\r\n            <div :id=\"controlId\" class=\"js-cybersource-payment-inputs cybersource-payment-inputs\" ref=\"paymentInputs\">\r\n                <div class=\"gateway-creditcard-container gateway-payment-container js-gateway-creditcard-container\">\r\n                    <div class=\"form-group position-relative\">\r\n                        <label class=\"control-label\">Card Number</label>\r\n                        <div class=\"form-control js-credit-card-input iframe-input credit-card-input\"></div>\r\n                        <i id=\"cardDisplay\" style=\"position: absolute; right: 10px; bottom: 3px;\"></i>\r\n                    </div>\r\n                    <div class=\"break\"></div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-xs-6 exp-col\">\r\n                            <div class=\"iframe-input credit-card-exp-input js-credit-card-exp-input\"></div>\r\n                            <DatePartsPicker label=\"Expiration Date\" :isRequired=\"true\" :startYear=\"nowYear\" :futureYearCount=\"15\" v-model=\"ccexpvalue\" :showBlankItem=\"false\" :multiple=\"false\" :hideDay=\"true\" />\r\n                        </div>\r\n                        <div class=\"col-xs-6 cvv-col\">\r\n                            <div class=\"form-group\">\r\n                                <label class=\"control-label credit-card-cvv-label\">{{ FlexJS?.config.fields.cvv.title }}</label>\r\n                                <div id=\"divCVV\" class=\"form-control js-credit-card-cvv-input iframe-input credit-card-cvv-input input-width-sm\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"button\" style=\"display: none;\" class=\"payment-button js-payment-button\"></button>\r\n            </div>\r\n\r\n            <div v-show=\"validationMessage\" class=\"alert alert-validation js-payment-input-validation\">\r\n                <span class='js-validation-message'>\r\n                    {{ validationMessage }}\r\n                    <p v-show=\"validationMessageShowReload\"><a href=\"javascript:location.reload();\" class=\"btn btn-warning mt-3\" onclick=\"Rock.controls.bootstrapButton.showLoading(this);\" data-loading-text=\"Reloading...\">Reload Page</a></p>\r\n                </span>\r\n            </div>\r\n        </div>\r\n\r\n        <input ref=\"inputStyleHook\" class=\"form-control cybersource-input-style-hook form-group\" style=\"display: none;\">\r\n\r\n        <div class=\"form-group has-error\" style=\"display: none;\">\r\n            <input ref=\"inputInvalidStyleHook\" type=\"text\" class=\"form-control\">\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    // #region MicroForm Types\r\n\r\n    type InputField = {\r\n        selector: string;\r\n        title: string;\r\n        placeholder: string;\r\n    };\r\n\r\n    type HideableInputField = InputField & {\r\n        display?: \"show\" | \"hide\" | \"required\";\r\n    };\r\n\r\n    type InputFields = {\r\n        ccnumber?: InputField;\r\n        ccexp?: InputField;\r\n        cvv?: HideableInputField;\r\n\r\n        [index: string]: InputField | undefined;\r\n    };\r\n\r\n    type CardTokenResponse = {\r\n        number: string | null;\r\n\r\n        bin: string | null;\r\n\r\n        exp: string | null;\r\n\r\n        hash: string | null;\r\n\r\n        type: string | null;\r\n    };\r\n\r\n    type TokenResponse = {\r\n        token?: string;\r\n\r\n        card?: CardTokenResponse;\r\n\r\n        validationMessage?: string;\r\n\r\n        errorMessage?: string;\r\n    };\r\n\r\n    type MonthYearDay = {\r\n        month: number;\r\n        year: number;\r\n        day: number;\r\n    }\r\n\r\n    type TimeoutCallback = () => void;\r\n    type ValidationCallback = (field: string, validated: boolean, message: string) => void;\r\n    type FieldsAvailableCallback = () => void;\r\n    type ResponseCallback = (response: TokenResponse) => void;\r\n\r\n    type MicroformOptions = {\r\n        paymentSelector: string;\r\n\r\n        variant: \"inline\";\r\n\r\n        fields: InputFields;\r\n\r\n        styleSniffer: boolean;\r\n\r\n        customStyles: Record<string, Record<string, string>>;\r\n\r\n        customCss: Record<string, string>;\r\n\r\n        focusCss: Record<string, string>;\r\n\r\n        invalidCss: Record<string, string>;\r\n\r\n        placeholderCss: Record<string, string>;\r\n\r\n        cardIcons: Record<string, string>\r\n\r\n        timeoutDuration?: number;\r\n\r\n        timeoutCallback?: TimeoutCallback;\r\n\r\n        validationCallback?: ValidationCallback;\r\n\r\n        fieldsAvailableCallback?: FieldsAvailableCallback;\r\n\r\n        callback: ResponseCallback;\r\n\r\n        flexTimeout?: number;\r\n\r\n        flexTimeLoaded?: number;\r\n    };\r\n\r\n    type MicroformCard = {\r\n        name: string;\r\n        securityCode: { name:string }\r\n    }\r\n\r\n    type MicroformResponse = {\r\n        card: Array<MicroformCard>;\r\n        message: string;\r\n    }\r\n    type MicroformField = {\r\n        _config: object;\r\n\r\n        _iframe: HTMLIFrameElement;\r\n\r\n        _loaded: boolean;\r\n\r\n        load: (selector: string) => void;\r\n\r\n        on: (selector: string, callback:(data:MicroformResponse) => void) => void;\r\n    };\r\n\r\n    type Microform = {\r\n        createField: (type:string, options?:object) => MicroformField;\r\n        createToken: (options:object, callback:(data:MicroformResponse, token:string) => void) => void;\r\n    }\r\n\r\n    type FlexJS = {\r\n        config: MicroformOptions;\r\n\r\n        captureContext: string;\r\n\r\n        microform: Microform;\r\n\r\n        inSubmission: boolean;\r\n\r\n        number:MicroformField;\r\n\r\n        securityCode:MicroformField;\r\n\r\n        loadCheckInterval: ReturnType<typeof setInterval>;\r\n    };\r\n\r\n    /* eslint-disable-next-line */\r\n    let FlexJS: FlexJS | undefined;\r\n\r\n    /* eslint-disable-next-line */\r\n    declare function Flex(jwk:string): void | undefined;\r\n\r\n    // #endregion\r\n\r\n</script>\r\n\r\n<script setup lang=\"ts\">\r\n    import { computed, onMounted, PropType, ref } from \"vue\";\r\n    import LoadingIndicator from \"@Obsidian/Controls/loadingIndicator\";\r\n    import DatePartsPicker from \"@Obsidian/Controls/datePartsPicker\";\r\n    import { newGuid } from \"@Obsidian/Utility/guid\";\r\n    import { onSubmitPayment } from \"@Obsidian/Core/Controls/financialGateway\";\r\n    import { GatewayEmitStrings } from \"@Obsidian/Enums/Controls/gatewayEmitStrings\";\r\n    import { FormError } from \"@Obsidian/Utility/form\";\r\n\r\n    /**\r\n     * The settings we expect to receive from the web server.\r\n     */\r\n    type Settings = {\r\n        gatewayUrl: string;\r\n        microFormJsPath: string;\r\n        microFormJWK: string;\r\n    };\r\n\r\n    /**\r\n     * The field validation state for the various input fields.\r\n     */\r\n    type ValidationField = {\r\n        /** The name of the field. */\r\n        field: string;\r\n\r\n        /** true if the field is valid; otherwise false. */\r\n        status: boolean;\r\n\r\n        /** If status if false this will contain the error message; otherwise an empty string. */\r\n        message: string;\r\n    };\r\n\r\n    const standardStyling = ``;\r\n\r\n    /**\r\n     * Ensures the Cybersource Flex Microform script is loaded into the browser.\r\n     *\r\n     * @param microFormJWK The microform jwk key that will be used to initialize the script.\r\n     */\r\n    async function loadMicroformJsAsync(microFormJWK: string): Promise<boolean> {\r\n        if (typeof Flex === \"undefined\") {\r\n            const script = document.createElement(\"script\");\r\n            script.type = \"text/javascript\";\r\n            script.src = props.settings.microFormJsPath;\r\n            //script.setAttribute(\"data-tokenization-key\", microFormJWK);\r\n            script.setAttribute(\"data-variant\", \"inline\");\r\n            document.getElementsByTagName(\"head\")[0].appendChild(script);\r\n\r\n            try {\r\n                await new Promise<void>((resolve, reject) => {\r\n                    script.addEventListener(\"load\", () => resolve());\r\n                    script.addEventListener(\"error\", () => reject());\r\n                });\r\n            }\r\n            catch {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return typeof Flex !== \"undefined\";\r\n    }\r\n\r\n    /**\r\n     * Loads styles into the head.\r\n     */\r\n    async function loadStandardStyleTagAsync(): Promise<void> {\r\n        const style = document.createElement(\"style\");\r\n        style.type = \"text/css\";\r\n        style.innerText = standardStyling;\r\n\r\n        await new Promise<void>((resolve, reject) => {\r\n            style.addEventListener(\"load\", () => resolve());\r\n            style.addEventListener(\"error\", () => reject());\r\n\r\n            document.getElementsByTagName(\"head\")[0].appendChild(style);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the standard Microform options. This is primarily all the custom CSS\r\n     * and control references.\r\n     *\r\n     * @param controlId The identifier of the parent control that contains all the input fields.\r\n     * @param inputStyleHook The element that will be used for standard styling information.\r\n     * @param inputInvalidStyleHook The element that will be used for invalid styling information.\r\n     *\r\n     * @returns An object that contains the FlexJS options.\r\n     */\r\n     function getFlexJSOptions(controlId: string, inputStyleHook: HTMLElement | null, inputInvalidStyleHook: HTMLElement | null): MicroformOptions {\r\n        // Populate our custom CSS to make the fields mostly match standard Rock\r\n        // input fields.\r\n        const customStyles: Record<string, Record<string, string>> = {\r\n            ':disabled': { 'cursor': 'not-allowed' },\r\n            'valid': { 'color': '#3c763d' },\r\n            'invalid': { 'color': '#a94442' }\r\n        };\r\n        const customCss: Record<string, string> = {\r\n            \"margin-bottom\": \"5px\",\r\n            \"margin-top\": \"0\"\r\n        };\r\n        if (inputStyleHook) {\r\n            const inputStyles = getComputedStyle(inputStyleHook);\r\n\r\n            customCss[\"color\"] = inputStyles.color;\r\n            customCss[\"border-bottom-color\"] = inputStyles.borderBottomColor;\r\n            customCss[\"border-bottom-left-radius\"] = inputStyles.borderBottomLeftRadius;\r\n            customCss[\"border-bottom-right-radius\"] = inputStyles.borderBottomRightRadius;\r\n            customCss[\"border-bottom-style\"] = inputStyles.borderBottomStyle;\r\n            customCss[\"border-bottom-width\"] = inputStyles.borderBottomWidth;\r\n            customCss[\"border-left-color\"] = inputStyles.borderLeftColor;\r\n            customCss[\"border-left-style\"] = inputStyles.borderLeftStyle;\r\n            customCss[\"border-left-width\"] = inputStyles.borderLeftWidth;\r\n            customCss[\"border-right-color\"] = inputStyles.borderRightColor;\r\n            customCss[\"border-right-style\"] = inputStyles.borderRightStyle;\r\n            customCss[\"border-right-width\"] = inputStyles.borderRightWidth;\r\n            customCss[\"border-top-color\"] = inputStyles.borderTopColor;\r\n            customCss[\"border-top-left-radius\"] = inputStyles.borderTopLeftRadius;\r\n            customCss[\"border-top-right-radius\"] = inputStyles.borderTopRightRadius;\r\n            customCss[\"border-top-style\"] = inputStyles.borderTopStyle;\r\n            customCss[\"border-top-width\"] = inputStyles.borderTopWidth;\r\n            customCss[\"border-width\"] = inputStyles.borderWidth;\r\n            customCss[\"border-style\"] = inputStyles.borderStyle;\r\n            customCss[\"border-radius\"] = inputStyles.borderRadius;\r\n            customCss[\"border-color\"] = inputStyles.borderColor;\r\n            customCss[\"background-color\"] = inputStyles.backgroundColor;\r\n            customCss[\"box-shadow\"] = inputStyles.boxShadow;\r\n            customCss[\"padding\"] = inputStyles.padding;\r\n            customCss[\"font-size\"] = inputStyles.fontSize;\r\n            customCss[\"height\"] = inputStyles.height;\r\n            customCss[\"font-family\"] = inputStyles.fontFamily;\r\n        }\r\n\r\n        // Custom focus CSS to make the input fields match Rock style.\r\n        const focusCss: Record<string, string> = {\r\n            \"border-color\": getComputedStyle(document.documentElement).getPropertyValue(\"--focus-state-border-color\"),\r\n            \"outline-style\": \"none\"\r\n        };\r\n\r\n        // Custom invalid CSS to apply to the field to make it look like a Rock\r\n        // input field.\r\n        const invalidCss: Record<string, string> = {};\r\n        if (inputInvalidStyleHook) {\r\n            invalidCss[\"border-color\"] = getComputedStyle(inputInvalidStyleHook).borderColor;\r\n        }\r\n\r\n        // Custom CSS to apply to the placeholder text.\r\n        const placeholderCss: Record<string, string> = {\r\n            \"color\": getComputedStyle(document.documentElement).getPropertyValue(\"--input-placeholder\")\r\n        };\r\n\r\n        const cardIcons: Record<string, string> = {\r\n            \"visa\": 'fab fa-cc-visa', \r\n            \"mastercard\": 'fab fa-cc-mastercard', \r\n            \"amex\": 'fab fa-cc-amex',\r\n            \"discover\": 'fab fa-cc-discover',\r\n            \"dinersclub\": 'fab fa-cc-diners-club',\r\n            \"jcb\": 'fab fa-cc-jcb'\r\n        };\r\n\r\n        // Build the Microform options.\r\n        const options: MicroformOptions = {\r\n            paymentSelector: `${controlId} .js-payment-button`,\r\n            variant: \"inline\",\r\n            fields: {\r\n                ccnumber: {\r\n                    selector: `#${controlId} .js-credit-card-input`,\r\n                    title: \"Card Number\",\r\n                    placeholder: \"0000 0000 0000 0000\"\r\n                },\r\n                ccexp: {\r\n                    selector: `#${controlId} .js-credit-card-exp-input`,\r\n                    title: \"Expiration Date\",\r\n                    placeholder: \"MM / YY\"\r\n                },\r\n                cvv: {\r\n                    display: \"show\",\r\n                    selector: `#${controlId} .js-credit-card-cvv-input`,\r\n                    title: \"Security Code\",\r\n                    placeholder: \"CVV\"\r\n                } as InputField\r\n            },\r\n            styleSniffer: false,\r\n            customStyles,\r\n            customCss,\r\n            focusCss,\r\n            invalidCss,\r\n            placeholderCss,\r\n            cardIcons,\r\n            timeoutDuration: 10000,\r\n            flexTimeout: 900000,\r\n            flexTimeLoaded: new Date().getTime(),\r\n            callback: () => { /* Intentionally empty, this will be replaced by the caller. */ }\r\n        };\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Translates the Cybersource field name into a user friendly one.\r\n     *\r\n     * @param field The field name as provided by Cybersource.\r\n     *\r\n     * @returns A user friendly name for the field.\r\n     */\r\n     function getFieldFriendlyName(field: string): string {\r\n        if (field === \"ccnumber\") {\r\n            return \"Card Number\";\r\n        }\r\n        else if (field === \"ccexp\") {\r\n            return \"Expiration Date\";\r\n        }\r\n        else if (field === \"cvv\") {\r\n            return \"Security Code\";\r\n        }\r\n        else {\r\n            return \"Payment Information\";\r\n        }\r\n    }\r\n    \r\n     function checkCybersourceFieldsLoaded(clearTimer:boolean = true): void {\r\n         var currentTime = new Date().getTime();\r\n         var timeDiff = currentTime - FlexJS?.config?.flexTimeLoaded ?? 0;\r\n         if (FlexJS?.config?.flexTimeout && timeDiff >= FlexJS?.config?.flexTimeout) {\r\n             if (clearTimer) {\r\n                 clearInterval(FlexJS?.loadCheckInterval);\r\n             }\r\n\r\n            validationMessage.value = 'We\\'re sorry your session has timed out. Please reload the page to try again.';\r\n            validationMessageShowReload.value = true;\r\n\r\n            var actionBtn = document.querySelector('.btn-give-now, .js-submit-hostedpaymentinfo, .navigation.actions .btn, .registration-entry .actions .btn-primary');\r\n            if (actionBtn != null) {\r\n                actionBtn.classList.add('disabled');\r\n                actionBtn.removeAttribute('href');\r\n            }\r\n         }\r\n     }\r\n\r\n     function initCybersourceMicroFormFields():void {\r\n         if (FlexJS?.number == undefined && FlexJS?.securityCode == undefined) {\r\n             FlexJS.number = FlexJS?.microform?.createField('number', { placeholder: '0000 0000 0000 0000' });\r\n             FlexJS.securityCode = FlexJS?.microform?.createField('securityCode');\r\n         }\r\n\r\n         FlexJS?.number?.load('.cybersource-payment-inputs .js-credit-card-input');\r\n         FlexJS?.securityCode?.load('.cybersource-payment-inputs .js-credit-card-cvv-input');\r\n\r\n         FlexJS?.number?.on('error', function(data) {\r\n             console.error(data);\r\n             validationMessage.value = data.message;\r\n         });\r\n\r\n         FlexJS?.number?.on('load', function(data) { \r\n            loading.value = false; \r\n        });\r\n\r\n         var cardIcon = document.querySelector('#cardDisplay');\r\n         var cardSecurityCodeLabel = document.querySelector('label.credit-card-cvv-label');\r\n\r\n         FlexJS?.number?.on('change', function(data) {\r\n           if (data.card.length === 1) {\r\n             cardIcon.className = 'fa-2x ' + FlexJS?.config?.cardIcons[data.card[0].name];\r\n             cardSecurityCodeLabel.textContent = data.card[0].securityCode.name;\r\n             FlexJS.config.fields.cvv.title = data.card[0].securityCode.name;\r\n           } else {\r\n             cardIcon.className = 'fa-2x fas fa-credit-card';\r\n           }\r\n         });\r\n\r\n         checkCybersourceFieldsLoaded(false);\r\n     };\r\n\r\n     function submitCybersourceMicroFormInfo():void {\r\n         var options = {\r\n             expirationMonth: ('00'+ccexpvalue.month).slice(-2),\r\n             expirationYear: ccexpvalue.year\r\n         };\r\n\r\n         FlexJS.inSubmission = true;\r\n\r\n         FlexJS?.microform?.createToken(options, function (err, token) {\r\n             if (err) {\r\n                 // handle error\r\n                 console.error(err);\r\n                 emit(GatewayEmitStrings.Error, err.message);\r\n             } else {\r\n                hasReceivedToken = true;\r\n                emit(GatewayEmitStrings.Success, token ?? \"\");\r\n             }\r\n         });\r\n     };\r\n\r\n    const props = defineProps({\r\n        settings: {\r\n            type: Object as PropType<Settings>,\r\n            required: true\r\n        }\r\n    });\r\n\r\n    const emit = defineEmits<{\r\n        (e: typeof GatewayEmitStrings.Success, value: string): void;\r\n        (e: typeof GatewayEmitStrings.Validation, value: FormError[]): void;\r\n        (e: typeof GatewayEmitStrings.Error, value: string): void;\r\n    }>();\r\n\r\n    let hasAttemptedSubmit = false;\r\n\r\n    /** true if we have received a token back from Cybersource. */\r\n    let hasReceivedToken = false;\r\n\r\n    const creditCardButtonClasses = [\"btn\", \"btn-default\", \"active\", \"payment-creditcard\"];\r\n\r\n    const nowYear = computed((): number => { return new Date().getFullYear(); });\r\n\r\n    /** true while we are still loading data; otherwise false. */\r\n    const loading = ref(true);\r\n\r\n    /** true if we failed to load the Microform content. */\r\n    const failedToLoad = ref(false);\r\n\r\n    /** Contains the current validation message to be displayed. */\r\n    const validationMessage = ref(\"\");\r\n    const validationMessageShowReload = ref(false);\r\n\r\n    /** true if we have already sent a token response to the server; otherwise false. */\r\n    const tokenResponseSent = ref(false);\r\n\r\n    let ccexpvalue:MonthYearDay = { month: 0, year: 0, day: 0 };\r\n\r\n    /**\r\n     * Contains a unique identifier that we can use to allow MicroformJS\r\n     * to find our input fields.\r\n     */\r\n    const controlId = `cyberSource_${newGuid()}`;\r\n\r\n    /** Reference to helper element that allows us to get CSS styles. */\r\n    const inputStyleHook = ref<HTMLElement | null>(null);\r\n\r\n    /** Reference to helper element that allows us to get invalid input CSS styles. */\r\n    const inputInvalidStyleHook = ref<HTMLElement | null>(null);\r\n\r\n    const paymentInputs = ref<HTMLElement | null>(null);\r\n\r\n    /** Contains all the field validation states. */\r\n    const validationFieldStatus: Record<string, ValidationField> = {\r\n        ccnumber: { field: getFieldFriendlyName(\"ccnumber\"), status: false, message: \"is required\" },\r\n        ccexp: { field: getFieldFriendlyName(\"ccexp\"), status: false, message: \"is required\" },\r\n        cvv: { field: getFieldFriendlyName(\"cvv\"), status: false, message: \"is required\" }\r\n    };\r\n\r\n    /**\r\n     * Validates all the inputs from MicroformJS to see if any visible input\r\n     * fields are invalid.\r\n     *\r\n     * @returns An object that describes if all the inputs are valid.\r\n     */\r\n    function validateInputs(): FormError[] {\r\n        const errors: FormError[] = [];\r\n\r\n        for (const validationFieldKey in validationFieldStatus) {\r\n            const validationField = validationFieldStatus[validationFieldKey];\r\n\r\n            const inputField = document.querySelector(FlexJS.config.fields[validationFieldKey].selector ?? \"\") as HTMLElement;\r\n            const fieldVisible = (inputField?.offsetWidth ?? 0) !== 0 || (inputField?.offsetHeight ?? 0) !== 0;\r\n\r\n            if (fieldVisible && !validationField.status) {\r\n                const validationFieldTitle = getFieldFriendlyName(validationFieldKey);\r\n\r\n                errors.push({\r\n                    name: validationFieldTitle,\r\n                    text: validationField.message || \"unknown validation error\"\r\n                });\r\n            }\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    /**\r\n     * Callback function that handles the timeout scenario of Cybersource.\r\n     */\r\n    const timeoutCallback: TimeoutCallback = () => {\r\n        // If we got a timeout after sending the response then ignore the error.\r\n        if (tokenResponseSent.value) {\r\n            return;\r\n        }\r\n\r\n        // A timeout callback will fire due to a timeout or incomplete\r\n        // input fields (Cybersource doesn't tell us why).\r\n        console.log(\"The tokenization didn't respond in the expected timeframe. This could be due to an invalid or incomplete field or poor connectivity - \" + Date());\r\n\r\n        // Since we don't know exactly what happened, lets see if it might\r\n        // be invalid inputs by checking them all manually.\r\n        //const validationErrors = validateInputs();\r\n\r\n        //if (validationErrors.length > 0) {\r\n        //    emit(GatewayEmitStrings.Validation, validationErrors);\r\n        //}\r\n        //else {\r\n            // Inputs seem to be valid, so show a message to let them\r\n            // know what seems to be happening.\r\n            console.log(\"Timeout happened for unknown reason, probably poor connectivity since we already validated inputs.\");\r\n\r\n            emit(GatewayEmitStrings.Validation, [\r\n                {\r\n                    name: \"Payment Timeout\",\r\n                    text: \"Response from gateway timed out. This could be do to poor connectivity or invalid payment values.\"\r\n                }\r\n            ]);\r\n        //}\r\n    };\r\n\r\n    /**\r\n     * Callback function that handles field validation results from the\r\n     * Microform back-end.\r\n     *\r\n     * @param field The name of the field being validated.\r\n     * @param validated true if the field is valid; otherwise false.\r\n     * @param message A message that describes the reason for the validation failure.\r\n     */\r\n    const validationCallback: ValidationCallback = (field: string, validated: boolean, message: string): void => {\r\n        // if there is a validation error, keep the message and field that\r\n        // has the error. Then we'll check it before starting the payment\r\n        // submission.\r\n\r\n        if (message === \"Field is empty\") {\r\n            message = \"is required\";\r\n        }\r\n\r\n        validationFieldStatus[field] = {\r\n            field: field,\r\n            status: validated,\r\n            message: message\r\n        };\r\n\r\n        const validationErrors = validateInputs();\r\n\r\n        if (hasAttemptedSubmit && !(FlexJS?.inSubmission ?? false) && !hasReceivedToken) {\r\n            emit(GatewayEmitStrings.Validation, validationErrors);\r\n        }\r\n    };\r\n\r\n    // Add a callback when the submit payment button is pressed.\r\n    onSubmitPayment(() => {\r\n        if (loading.value || failedToLoad.value) {\r\n            return;\r\n        }\r\n\r\n        tokenResponseSent.value = false;\r\n\r\n        // The delay allows field validation when losing field focus.\r\n        setTimeout(() => {\r\n            //const validationErrors = validateInputs();\r\n\r\n            hasAttemptedSubmit = true;\r\n            //if (validationErrors.length === 0) {\r\n                submitCybersourceMicroFormInfo();\r\n            //}\r\n            //else {\r\n            //    emit(GatewayEmitStrings.Validation, validationErrors);\r\n            //}\r\n        }, 0);\r\n    });\r\n\r\n    // Additional processing once our template has been processed and mounted\r\n    // into the DOM. Initialize the Cybersource Microform fields.\r\n    onMounted(async () => {\r\n        await loadStandardStyleTagAsync();\r\n\r\n        if (!(await loadMicroformJsAsync(props.settings.microFormJWK ?? \"\"))) {\r\n            emit(GatewayEmitStrings.Error, \"Error configuring hosted gateway. This could be due to an invalid or missing API Key. Please verify that API Key is configured correctly in gateway settings.\");\r\n            return;\r\n        }\r\n\r\n        if (paymentInputs.value) {\r\n            paymentInputs.value.querySelectorAll(\".iframe-input\").forEach(el => {\r\n                el.innerHTML = \"\";\r\n            });\r\n        }\r\n\r\n        try {\r\n            const options = getFlexJSOptions(controlId, inputStyleHook.value, inputInvalidStyleHook.value);\r\n\r\n            var flex = new Flex(props.settings.microFormJWK);\r\n\r\n            FlexJS = {\r\n                config: options,\r\n                captureContext: props.settings.microFormJWK,\r\n                inSubmission: false,\r\n                microform: flex.microform({ styles: FlexJS?.config.customStyles }),\r\n                loadCheckInterval: setInterval(checkCybersourceFieldsLoaded,1000),\r\n                number: undefined,\r\n                securityCode: undefined\r\n            };\r\n\r\n            initCybersourceMicroFormFields();\r\n        }\r\n        catch {\r\n            failedToLoad.value = true;\r\n            emit(GatewayEmitStrings.Error, \"Error configuring hosted gateway. This could be due to an invalid or missing API Key. Please verify that API Key is configured correctly in gateway settings.\");\r\n            return;\r\n        }\r\n    });\r\n</script>"],"names":["FlexJS","standardStyling","loadMicroformJsAsync","_x","_loadMicroformJsAsync","apply","arguments","_asyncToGenerator","microFormJWK","Flex","script","document","createElement","type","src","props","settings","microFormJsPath","setAttribute","getElementsByTagName","appendChild","Promise","resolve","reject","addEventListener","_unused2","loadStandardStyleTagAsync","_loadStandardStyleTagAsync","style","innerText","getFlexJSOptions","controlId","inputStyleHook","inputInvalidStyleHook","customStyles","customCss","inputStyles","getComputedStyle","color","borderBottomColor","borderBottomLeftRadius","borderBottomRightRadius","borderBottomStyle","borderBottomWidth","borderLeftColor","borderLeftStyle","borderLeftWidth","borderRightColor","borderRightStyle","borderRightWidth","borderTopColor","borderTopLeftRadius","borderTopRightRadius","borderTopStyle","borderTopWidth","borderWidth","borderStyle","borderRadius","borderColor","backgroundColor","boxShadow","padding","fontSize","height","fontFamily","focusCss","documentElement","getPropertyValue","invalidCss","placeholderCss","cardIcons","options","paymentSelector","concat","variant","fields","ccnumber","selector","title","placeholder","ccexp","cvv","display","styleSniffer","timeoutDuration","flexTimeout","flexTimeLoaded","Date","getTime","callback","checkCybersourceFieldsLoaded","_ref2","_FlexJS","_FlexJS$config","_FlexJS2","_FlexJS2$config","_FlexJS3","_FlexJS3$config","clearTimer","length","undefined","currentTime","timeDiff","config","_FlexJS4","clearInterval","loadCheckInterval","validationMessage","value","validationMessageShowReload","actionBtn","querySelector","classList","add","removeAttribute","initCybersourceMicroFormFields","_FlexJS5","_FlexJS6","_FlexJS9","_FlexJS9$number","_FlexJS10","_FlexJS10$securityCod","_FlexJS11","_FlexJS11$number","_FlexJS12","_FlexJS12$number","_FlexJS13","_FlexJS13$number","number","securityCode","_FlexJS7","_FlexJS7$microform","_FlexJS8","_FlexJS8$microform","microform","createField","load","on","data","console","error","message","loading","cardIcon","cardSecurityCodeLabel","card","_FlexJS14","_FlexJS14$config","className","name","textContent","submitCybersourceMicroFormInfo","_FlexJS15","_FlexJS15$microform","expirationMonth","ccexpvalue","month","slice","expirationYear","year","inSubmission","createToken","err","token","emit","GatewayEmitStrings","Error","Success","nowYear","computed","getFullYear","ref","failedToLoad","tokenResponseSent","day","newGuid","paymentInputs","onSubmitPayment","setTimeout","onMounted","_props$settings$micro","querySelectorAll","forEach","el","innerHTML","_FlexJS17","flex","captureContext","styles","setInterval","_unused"],"mappings":"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"}